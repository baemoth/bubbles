/**
 * Copyright (c) 2014,2015,2016 Enzien Audio Ltd.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, and/or
 * sublicense copies of the Software, strictly on a non-commercial basis,
 * and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 *
 * DO NOT MODIFY. THIS CODE IS MACHINE GENERATED BY THE ENZIEN AUDIO HEAVY COMPILER.
 */

using System;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using UnityEngine;
using UnityEngine.Assertions;
using AOT;

[RequireComponent (typeof (AudioSource))]

public class Hv_bubbles_LibWrapper : MonoBehaviour {

  // Delegate method for thread-safe receiver for float messages from the patch context
  // Example usage:
  /*
    void Start () {
        Hv_bubbles_LibWrapper script = GetComponent<Hv_bubbles_LibWrapper>();
        script.RegisterSendHook();
        script.FloatReceivedCallback += OnFloatMessage;
    }

    void OnFloatMessage(Hv_bubbles_LibWrapper.FloatMessage message) {
        Debug.Log(message.receiverName + ": " + message.value);
    }
  */
  public class FloatMessage {
    public string receiverName;
    public float value;

    public FloatMessage(string name, float x) {
      receiverName = name;
      value = x;
    }
  }
  public delegate void FloatMessageReceived(FloatMessage message);
  public FloatMessageReceived FloatReceivedCallback;
  
  private enum HeavyParameters {
    HV_BUBBLES_PARAM_ACCEL = unchecked((int) 0xD6F849EB),
    HV_BUBBLES_PARAM_TRIGGER = unchecked((int) 0xEAD0B378),
  }
  
  public float accel = 0.0f; // accel
  public float trigger = 0.0f; // trigger
  
  // internal state
  private float _accel = 0.0f;
  private float _trigger = 0.0f;
  private Hv_bubbles_Context _context;
  private readonly object _bangQueueSync = new object();
  private readonly Queue<int> _bangQueue = new Queue<int>();

  public void RegisterSendHook() {
    _context.RegisterSendHook();
  }

  public void SendBangToReceiver(string receiverName) {
    lock(_bangQueueSync) {
      _bangQueue.Enqueue(_context.StringToHash(receiverName));
    }
  }

  public void FillTableWithMonoAudioClip(string tableName, AudioClip clip) {
    if (clip.channels > 1) {
      Debug.LogWarning("Hv_bubbles_LibWrapper: Only loading first channel of '" +
          clip.name + "' into table '" +
          tableName + "'. Multi-channel files are not supported.");
    }
    float[] buffer = new float[clip.samples]; // copy only the 1st channel
    clip.GetData(buffer, 0);
    _context.FillTableWithFloatBuffer(tableName, buffer);
  }

  public void FillTableWithFloatBuffer(string tableName, float[] buffer) {
    _context.FillTableWithFloatBuffer(tableName, buffer);
  }

  private void Awake() {
    _context = new Hv_bubbles_Context((double) AudioSettings.outputSampleRate);
  }
  
  private void Start() {
    _context.SendFloatToReceiver((int) HeavyParameters.HV_BUBBLES_PARAM_ACCEL, Mathf.Clamp(accel, 0.0f, 1.0f));
    _context.SendFloatToReceiver((int) HeavyParameters.HV_BUBBLES_PARAM_TRIGGER, Mathf.Clamp(trigger, 0.0f, 1.0f));
  }
  
  private void Update() {
    // retreive sent messages
    if (_context.IsSendHookRegistered()) {
      Hv_bubbles_LibWrapper.FloatMessage tempMessage;
      while ((tempMessage = _context.msgQueue.GetNextMessage()) != null) {
        FloatReceivedCallback(tempMessage);
      }
    }
  }
  
  private void OnValidate() {
    if (_context != null) {
      if (_accel != accel) {
        _accel = accel = Mathf.Clamp(accel, 0.0f, 1.0f);
        _context.SendFloatToReceiver((int) HeavyParameters.HV_BUBBLES_PARAM_ACCEL, _accel);
      }
      if (_trigger != trigger) {
        _trigger = trigger = Mathf.Clamp(trigger, 0.0f, 1.0f);
        _context.SendFloatToReceiver((int) HeavyParameters.HV_BUBBLES_PARAM_TRIGGER, _trigger);
      }
    }
  }
  
  private void OnAudioFilterRead(float[] buffer, int numChannels) {
    Assert.AreEqual(numChannels, _context.GetNumOutputChannels()); // invalid channel configuration
    // process parameter changes
    OnValidate();

    // process all bang events
    lock (_bangQueueSync) {
      while (_bangQueue.Count != 0) {
        _context.SendBangToReceiver(_bangQueue.Dequeue());
      }
    }
    // process dsp
    _context.Process(buffer, buffer.Length / numChannels);
  }
}

class Hv_bubbles_Context {
  // Thread-safe message queue
  public class SendMessageQueue {
    private readonly object _msgQueueSync = new object();
    private readonly Queue<Hv_bubbles_LibWrapper.FloatMessage> _msgQueue = new Queue<Hv_bubbles_LibWrapper.FloatMessage>();

    public Hv_bubbles_LibWrapper.FloatMessage GetNextMessage() {
      lock (_msgQueueSync) {
        return (_msgQueue.Count != 0) ? _msgQueue.Dequeue() : null;
      }
    }

    public void AddMessage(string receiverName, float value) {
      Hv_bubbles_LibWrapper.FloatMessage msg = new Hv_bubbles_LibWrapper.FloatMessage(receiverName, value);
      lock (_msgQueueSync) {
        _msgQueue.Enqueue(msg);
      }
    }
  }

  public readonly SendMessageQueue msgQueue = new SendMessageQueue();
  private readonly GCHandle gch;
  private readonly IntPtr _context; // handle into unmanaged memory
  private SendHook _sendHook = null;

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern IntPtr hv_bubbles_new_with_options(double sampleRate, int poolKb);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern int hv_bubbles_process_interleaved(IntPtr ctx,
      [In] float[] inBuffer, [Out] float[] outBuffer, int numSamples);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_bubbles_free(IntPtr ctx);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern double hv_getSampleRate(IntPtr ctx);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern int hv_getNumInputChannels(IntPtr ctx);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern int hv_getNumOutputChannels(IntPtr ctx);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_setSendHook(IntPtr ctx, SendHook sendHook);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_setPrintHook(IntPtr ctx, PrintHook printHook);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern int hv_setUserData(IntPtr ctx, IntPtr userData);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_sendBangToReceiver(IntPtr ctx, int receiverHash);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_sendFloatToReceiver(IntPtr ctx, int receiverHash, float x);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern bool hv_msg_hasFormat(IntPtr message, string format);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern float hv_msg_getFloat(IntPtr message, int index);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern IntPtr hv_getTableForName(IntPtr ctx, string tableName);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern void hv_table_resize(IntPtr table, int newSize);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern IntPtr hv_table_getBuffer(IntPtr table);

  #if UNITY_IOS && !UNITY_EDITOR
  [DllImport ("__Internal")]
  #else
  [DllImport ("Hv_bubbles_LibWrapper")]
  #endif
  private static extern int hv_stringToHash(string s);

  private delegate void PrintHook(double timeStamp, string printName, string message, IntPtr userData);

  private delegate void SendHook(double timeStamp, string receiverName, IntPtr message, IntPtr userData);

  public Hv_bubbles_Context(double sampleRate, int poolKb=10) {
    gch = GCHandle.Alloc(msgQueue);
    _context = hv_bubbles_new_with_options(sampleRate, poolKb);
    hv_setPrintHook(_context, new PrintHook(OnPrint));
    hv_setUserData(_context, GCHandle.ToIntPtr(gch));
  }

  ~Hv_bubbles_Context() {
    hv_bubbles_free(_context);
    GC.KeepAlive(_context);
    GC.KeepAlive(_sendHook);
    gch.Free();
  }

  public void RegisterSendHook() {
    // Note: send hook functionality only applies to messages containing a single float value
    if (_sendHook == null) {
      _sendHook = new SendHook(OnMessageSent);
      hv_setSendHook(_context, _sendHook);
    }
  }

  public bool IsSendHookRegistered() {
    return (_sendHook != null);
  }

  public double GetSampleRate() {
    return hv_getSampleRate(_context);
  }

  public int GetNumInputChannels() {
    return hv_getNumInputChannels(_context);
  }

  public int GetNumOutputChannels() {
    return hv_getNumOutputChannels(_context);
  }

  public void SendBangToReceiver(int receiverHash) {
    hv_sendBangToReceiver(_context, receiverHash);
  }

  public void SendFloatToReceiver(int receiverHash, float x) {
    hv_sendFloatToReceiver(_context, receiverHash, x);
  }

  public void FillTableWithFloatBuffer(string tableName, float[] buffer) {
    IntPtr table = hv_getTableForName(_context, tableName);
    if (table != IntPtr.Zero) {
      hv_table_resize(table, buffer.Length);
      Marshal.Copy(buffer, 0, hv_table_getBuffer(table), buffer.Length);
      GC.KeepAlive(table);
    }
  }

  public int StringToHash(string s) {
    return hv_stringToHash(s);
  }

  public int Process(float[] buffer, int numFrames) {
    return hv_bubbles_process_interleaved(_context, buffer, buffer, numFrames);
  }

  [MonoPInvokeCallback(typeof(PrintHook))]
  private static void OnPrint(double timeStamp, string printName, string message, IntPtr userData) {
    Debug.Log(string.Format("{0} [{1:0.000}]: {2}", printName, timeStamp, message));
  }

  [MonoPInvokeCallback(typeof(SendHook))]
  private static void OnMessageSent(double timeStamp, string receiverName, IntPtr message, IntPtr userData) {
    if (hv_msg_hasFormat(message, "f")) {
      SendMessageQueue msgQueue = (SendMessageQueue) GCHandle.FromIntPtr(userData).Target;
      msgQueue.AddMessage(receiverName, hv_msg_getFloat(message, 0));
    }
  }
}
